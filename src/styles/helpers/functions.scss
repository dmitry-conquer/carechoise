@use "sass:math";

@function rem($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16) + rem;
  } @else {
    @error 'Do not use units of measurement when working with the rem() function! Pass only numbers as arguments.';
  }
}

@function round-to($number, $decimals: 4) {
  $factor: math.pow(10, $decimals);
  @return math.div(math.round($number * $factor), $factor);
}

@function fluid($min, $max) {
  $maxViewportWidth: 1440;
  $minViewportWidth: 375;

  $maxSize: round-to(math.div($max, 16));
  $minSize: round-to(math.div($min, 16));
  $maxWidth: round-to(math.div($maxViewportWidth, 16));
  $minWidth: round-to(math.div($minViewportWidth, 16));

  $slope: round-to(math.div(($maxSize - $minSize), ($maxWidth - $minWidth)));
  $yAxisIntersection: round-to(-$minWidth * $slope + $minSize);

  @return clamp(#{$minSize * 1rem}, #{$yAxisIntersection * 1rem} + #{$slope * 100vw}, #{$maxSize * 1rem});
}

@function em($px, $cur-fz) {
  @return calc($px / $cur-fz * 1em);
}

@function lh($lh, $fz) {
  @return calc($lh / $fz);
}

@function per($pxOne, $pxTwo) {
  @return calc((100% * $pxOne) / $pxTwo);
}

@mixin av($property, $startSize, $minSize, $widthFrom: 1400, $widthTo: 375) {
  $addSize: $startSize - $minSize;
  #{$property}: calc(#{$minSize + px} + #{$addSize} * (100vw - #{$widthTo + px}) / #{($widthFrom) - ($widthTo)});
  @media (min-width: ($widthFrom + px)) {
    #{$property}: $startSize + px;
  }
}
@mixin clamp($property, $max, $min) {
  #{$property}: clamp(#{$min}px, #{$max / 1400 * 100}vw, #{$max}px);
}

@function toRem($value) {
  $remValue: ($value / 16);
  @return $remValue;
}

@mixin clamp($prop, $minValue, $maxValue, $minWidth: 390, $maxWidth: 1400) {
  $slope: (toRem($maxValue) - toRem($minValue)) / (toRem($maxWidth) - toRem($minWidth));
  $yAxisIntersection: toRem(-$minWidth) * $slope + toRem($minValue);
  #{$prop}: clamp(#{toRem($minValue)}rem, #{$yAxisIntersection}rem + #{$slope * 100}vw, #{toRem($maxValue)}rem);
}
